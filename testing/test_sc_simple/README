The code in this directory is for doing feel good tests on the proper
workings of simple functions in Core. I define simple by how hard it is
to test. Every possibility for error is not excercised for each function and
every function does not have a test (this is a work in progress), however 
the code is mixed up excercising a more or less random set of VSIPL 
requirements so that general design problems with the library will be 
rooted out. The code assumes a "fairly well debugged" set of support 
functions; however if an error accurs all functions used in the test 
should be suspect.  The degree of suspicion should be based on the 
degree of confidence in the underlying libray code and specification compliance.

To determine the cause of errors it will be necessary to examine the 
underlying code of the failed test. The problem may not be in the tested 
function, but may be in one of the support routines, or other VSIPL routines
used in the test. 

Be aware that the criteria for picking <correct> or <error> is not foolproof. It worked on
my machine, but if you get error make sure that the criteria is proper first. In general
I used .0001 as an error between my result and matlab. It only got me in trouble one place,
(I think the power of 10 exponent) where my answers got big and float started to fail. For
embedded products these numbers may need to be twidled a little. I didn't set this in a
header file but the code is simple to modify if needed.

If you just want to run a single instance of a program you can write it like

/* a_test.c */
#include<stdio.h>
#include<string.h>
#include<vsip.h>
#include<VU.h>
#define NDPTR_f ((vsip_scalar_f*)NULL)
#define NDPTR_d ((vsip_scalar_d*)NULL)

#include"utility_f.h"
#include"utility_d.h"

/*function to test */
#include"cvscatter_f.h"

int main(int argc, char* argv[]){
     vsip_init((void*)0);
     cvscatter_f(); /*function to test*/
     vsip_finalize((void*)0);
     return 0;
}

and compile it and run.

You need the VU library included with the TASP VSIPL implementation so things
will print properly. 

To compile I do something like
cc -o a_test a_test.c -I<INCLUDE DIR> -L<LIBRARY DIR> -lVU_c -lvsip_c -lm

So on my machine to test the float precision of scalar matrix multiply (vsip_smmul_f)

The code looks like
/* a_test.c */
#include<stdio.h>
#include<string.h>
#include<vsip.h>
#include<VU.h>
#define NDPTR_f ((vsip_scalar_f*)NULL)
#define NDPTR_d ((vsip_scalar_d*)NULL)
#include"smmul_f.h" /* or _d */
int main(){
    smmul_f();
    return 0;
}

I compile with 
cc -o a_test a_test.c -I/home/judd/local/include -L/home/judd/local/lib -lVU_c -lvsip_c -lm

and

>a_test

produces the output below

******
TEST smmul_f
call vsip_smmul_f(alpha,b,c)
alpha = 1.234500
b =
[
1.100000  4.400000  7.700000 ;
2.200000  5.500000  8.800000 ;
3.300000  6.600000  9.900000 ;
];
c =
[
1.357950  5.431800  9.505651 ;
2.715900  6.789750  10.863601 ;
4.073850  8.147700  12.221550 ;
];

right answer =
[
1.3579  5.4318  9.5056 ;
2.7159  6.7897  10.8636 ;
4.0738  8.1477  12.2216 ;
];
correct
 b,c inplace
correct

I actually use a general test routine (make test_sc) and complile everything.

To run the code to test, for instance vsip_mmul_f (elementwise matrix times
matrix multiply) type 
test_sc mmul_f.
or to cases of as many tests as you want
test_sc mmul_f mmul_d mdiv_f mdiv_d <etc>
and they will run in order.

To test a lot of stuff it is easy to make a shell script and pipe the output to a
file. There is also an algorithm (make test_sc_all) which makes an executable
which will test everything. There is a lot of output so you should pipe stdout
to a file, then search the file for "error". If you find any there is a problem.
Note when searching for a problem also check out the test code. I did it in
a hurry, and it doesn't debug itself. However it currently all seems to run.

Randy Judd
